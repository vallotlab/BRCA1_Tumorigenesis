print(p)
dev.off()
###
p <- ggplot(umap_custom[draw,], aes(x =UMAP_1, y = UMAP_2 ,fill = metada_cells_col[draw] ))+ geom_point(size = 2, shape = 21,alpha=1) + theme_classic() + theme(legend.position = "right") + scale_fill_manual(values= col)
## Save the legend ###
leg <- as_ggplot(get_legend(p))
pdf(file = paste0(figDir, "/LEGEND_Umap_SubsetEpithelial_Subtype.pdf"), width = 10, height = 10)
print(leg)
dev.off()
dev.off()
umap_custom <- as.data.frame(s1[["umap"]]@cell.embeddings)
metada_cells_col <- new_col[match(s1$subtype,names(new_col))]
draw <- sample(1:dim(umap_custom)[1])
png(paste0(figDir,"/UMAP_epith_subtype.png"),height=2000, width = 2000,res=300)
p <- ggplot(umap_custom[draw,], aes(x =UMAP_1, y = UMAP_2 ))+ geom_point(size = 2, shape = 21,fill = metada_cells_col[draw],alpha=1) + theme_classic() + NoLegend() + NoAxes()
print(p)
dev.off()
###
p <- ggplot(umap_custom[draw,], aes(x =UMAP_1, y = UMAP_2 ,fill = metada_cells_col[draw] ))+ geom_point(size = 2, shape = 21,alpha=1) + theme_classic() + theme(legend.position = "right") + scale_fill_manual(values= new_col)
## Save the legend ###
leg <- as_ggplot(get_legend(p))
pdf(file = paste0(figDir, "/LEGEND_Umap_SubsetEpithelial_Subtype.pdf"), width = 10, height = 10)
print(leg)
dev.off()
dev.off()
p
p <- ggplot(umap_custom[draw,], aes(x =UMAP_1, y = UMAP_2 ))+ geom_point(size = 2, shape = 21,fill = metada_cells_col[draw],alpha=1) + theme_classic() + NoLegend() + NoAxes()
p
col=c("GCreP_2.7M"= "#33AB15", "GCreP_3M"= "#66C71C", "GCreP_L_mm_5481-5482_5.2M"="#E681E6", "T_5322_mm_6M"="#597EC2",
"T_5517_mm_6.9M"="#84CCF0", "T_6413_mm_6.9M"="#2B3FAD","GCreP_L_7412"="#D755E0","GCreP_7956"="#74D679")
##Other representation with non transparent circles, need shuffling to have a representation of all
umap_custom <- as.data.frame(epith[["umap"]]@cell.embeddings)
metada_cells_col <- col[match(epith$orig.ident,names(col))]
draw <- sample(1:dim(umap_custom)[1])
png(paste0(figDir,"/UMAP_epith_sample.png"),height=1000, width = 1000,res=300)
p <- ggplot(umap_custom[draw,], aes(x =UMAP_1, y = UMAP_2 ))+ geom_point(size = 2, shape = 21,fill = metada_cells_col[draw],alpha=1) + theme_classic() + NoLegend() + NoAxes()
print(p)
dev.off()
###
p <- ggplot(umap_custom[draw,], aes(x =UMAP_1, y = UMAP_2 ,fill = metada_cells_col[draw] ))+ geom_point(size = 2, shape = 21,alpha=1) + theme_classic() + theme(legend.position = "right") + scale_fill_manual(values= col)
## Save the legend ###
leg <- as_ggplot(get_legend(p))
pdf(file = paste0(figDir, "/LEGEND_Umap_Epithelial_Sample_N.pdf"), width = 10, height = 10)
print(leg)
dev.off()
dev.off()
col=c("GCreP_2.7M"= "#33AB15", "GCreP_3M"= "#66C71C", "GCreP_L_mm_5481-5482_5.2M"="#E681E6", "T_5322_mm_6M"="#597EC2",
"T_5517_mm_6.9M"="#84CCF0", "T_6413_mm_6.9M"="#2B3FAD","GCreP_L_7412"="#D755E0","GCreP_7956"="#74D679")
##Other representation with non transparent circles, need shuffling to have a representation of all
umap_custom <- as.data.frame(epith[["umap"]]@cell.embeddings)
metada_cells_col <- col[match(epith$orig.ident,names(col))]
draw <- sample(1:dim(umap_custom)[1])
png(paste0(figDir,"/UMAP_epith_sample.png"),height=2000, width = 2000,res=300)
p <- ggplot(umap_custom[draw,], aes(x =UMAP_1, y = UMAP_2 ))+ geom_point(size = 2, shape = 21,fill = metada_cells_col[draw],alpha=1) + theme_classic() + NoLegend() + NoAxes()
print(p)
dev.off()
###
p <- ggplot(umap_custom[draw,], aes(x =UMAP_1, y = UMAP_2 ,fill = metada_cells_col[draw] ))+ geom_point(size = 2, shape = 21,alpha=1) + theme_classic() + theme(legend.position = "right") + scale_fill_manual(values= col)
## Save the legend ###
leg <- as_ggplot(get_legend(p))
pdf(file = paste0(figDir, "/LEGEND_Umap_Epithelial_Sample_N.pdf"), width = 10, height = 10)
print(leg)
dev.off()
dev.off()
umap_custom <- as.data.frame(s1[["umap"]]@cell.embeddings)
metada_cells_col <- new_col[match(s1$subtype,names(new_col))]
draw <- sample(1:dim(umap_custom)[1])
png(paste0(figDir,"/UMAP_epith_subtype.png"),height=2000, width = 2000,res=300)
p <- ggplot(umap_custom[draw,], aes(x =UMAP_1, y = UMAP_2 ))+ geom_point(size = 2, shape = 21,fill = metada_cells_col[draw],alpha=1) + theme_classic() + NoLegend() + NoAxes()
print(p)
dev.off()
###
p <- ggplot(umap_custom[draw,], aes(x =UMAP_1, y = UMAP_2 ,fill = metada_cells_col[draw] ))+ geom_point(size = 2, shape = 21,alpha=1) + theme_classic() + theme(legend.position = "right") + scale_fill_manual(values= new_col)
## Save the legend ###
leg <- as_ggplot(get_legend(p))
pdf(file = paste0(figDir, "/LEGEND_Umap_SubsetEpithelial_Subtype.pdf"), width = 10, height = 10)
print(leg)
dev.off()
dev.off()
png(paste0(figDir,"/UMAP_epith_subtype2.png"),height=1500, width = 1500,res=300)
p <- ggplot(umap_custom[draw,], aes(x =UMAP_1, y = UMAP_2 ))+ geom_point(size = 3, shape = 21,fill = metada_cells_col[draw],alpha=1) + theme_classic() + NoLegend() + NoAxes()
print(p)
dev.off()
DimPlot(seu)
DimPlot(s1)
DimPlot(s1, group.by = "seurat_clusters")
DimPlot(s1, group.by = "sub.type")
DimPlot(s1, group.by = "seurat_clusters", label = T)
table(epith$subtype)
knitr::opts_chunk$set(echo = TRUE)
epith= FindSubCluster(epith, cluster = 7, resolution = 0.25,  graph.name = "SCT_snn")
Idents(epith)="seurat_clusters"
epith= FindSubCluster(epith, cluster = 7, resolution = 0.25,  graph.name = "SCT_snn")
DimPlot(epith, label = T)
DimPlot(epith, label = T, group.by = "sub.cluster")
Idents(epith.subset)="sub.cluster"
Defaulass
DefaultAssay(epith)
c3= FindMarkers(epith.subset, ident.1 = "7_1", ident.2 = "7_2", only.pos = F, logfc.threshold = 0.3) %>% dplyr::filter(p_val_adj < 0.05)
c3= FindMarkers(epith, ident.1 = "7_1", ident.2 = "7_2", only.pos = F, logfc.threshold = 0.3) %>% dplyr::filter(p_val_adj < 0.05)
Idents(epith)="sub.cluster"
c3= FindMarkers(epith, ident.1 = "7_1", ident.2 = "7_2", only.pos = F, logfc.threshold = 0.3) %>% dplyr::filter(p_val_adj < 0.05)
c3$gene=rownames(c3)
View(c3)
table(epith$sub.cluster)
table(epith$sub.cluster, epith$orig.ident)
DimPlot(epith, group.by = "sub.cluster", label = T) + NoLegend()
DimPlot(epith, group.by = "sub.cluster", label = T, cols = c(rep("grey",7), "blue", "green", "red", rep("grey", 11))) + NoLegend()
unique(epith$sub.cluster)
DimPlot(epith, group.by = "sub.cluster", label = T, cols = c(rep("grey",3), "blue", rep("grey",3),"green", "red", rep("grey", 12))) + NoLegend()
gc= c(rep("grey",7), "blue", "green", "red", rep("grey", 11))
gc
names(gc)=c(seq(0,6), "7_0", "7_1", "7_2", seq(8,18))
gc
DimPlot(epith, group.by = "sub.clu")
DimPlot(epith, group.by = "sub.cluster", cols = gc)
DefaultAssay(epith)="RNA"
Idents(epith)="sub.cluster"
lmarkers <- FindAllMarkers(epith, only.pos = TRUE, logfc.threshold = 0.9 )
markers=lmarkers
lmarkers= lmarkers%>% dplyr::filter(.,p_val_adj<0.05 )
## take the top 10 Most Upregulated genes per cluster as compared to all:
top10 <-lmarkers %>% group_by(cluster) %>% top_n(n = 10, wt = avg_log2FC)
library(dplyr)
top10 <-lmarkers %>% group_by(cluster) %>% top_n(n = 10, wt = avg_log2FC)
##Write the results on a sheet:
mylist= list(lmarkers,top10 )
names(mylist)= c("Epithelial_1vsAll_Subclusters","Top10_Epithelial_1vsAll_Sub")
#Save Workbook
writexl::write_xlsx(mylist, paste0(annotDir,"/DEG_Epithelial_SubclusterID_1vsAll_logFC0.5_FinalCorrected.xlsx"))
rm(mylist)
gc()
nbr=as.data.frame(table(epith$sub.cluster, epith$orig.ident)) %>%    group_by(Var1) %>%   slice_max(Freq) %>% as.data.frame()
topgenes=lmarkers[which(lmarkers$pct.1 >= 0.4),c(2,6,7)]
##Exclude unwanted genes:
topgenes= topgenes %>% dplyr::filter(!gene  %in% grep("^mt-", topgenes$gene, value = T)) %>% dplyr::filter(!gene  %in% grep("^Gm", topgenes$gene, value = T))  %>% dplyr::filter(!gene  %in% grep("^AC[0-9]{1,6}", lmarkers$gene, value = T)) %>% dplyr::filter(!gene  %in% grep("Rik$", lmarkers$gene, value = T)) %>% arrange(desc(avg_log2FC)) %>%  distinct(gene,.keep_all = TRUE)
#####rank per foldchange:
topgenes = topgenes %>% group_by(cluster) %>% arrange(desc(avg_log2FC), .by_group = T) %>% dplyr::slice(1:30, .preserve = T)
##
#####ssemble the top genes per cluster to get string vectors of genes:
topgenes=aggregate(gene ~., topgenes[,-1], toString)
#######
nbr$Var1=as.character(nbr$Var1)
nbr=nbr[match(topgenes$cluster,nbr$Var1),]
stopifnot(all(nbr$Var1== topgenes$Group.1))
topgenes$tumsize=nbr$Var2
topgenes$tumsize2= topgenes$tumsize
topgenes$tumsize2=dplyr::recode(topgenes$tumsize2, "T_6413_mm_6.9M"="T_1", "T_5517_mm_6.9M"="T_1", "T_5322_mm_6M"="T_2")
View(topgenes)
table(epith$orig.ident, epith$sub.cluster)
table( epith$sub.cluster,epith$orig.ident)
DimPlot(epith, group.by = "sub.cluster")
DimPlot(epith, group.by = "sub.cluster", label = T)
View(c3)
plot(reducedDim(dt),  pch = 16, cex = 0.5)
lines(dt, lwd = 2, type = "lineages", col = 'black')
DimPlot(epith, group.by = "subtype")
DimPlot(epith, group.by = "subtype", label = T)
col[1:4]
unique(seu$subtype)
DimPlot(seu, label = T)
DimPlot(epith, label = T)
colourpicker:::colourPickerAddin()
colourpicker:::colourPickerAddin()
new_col=c("LP"= "#F27ECB",  "Avd"="#DB87E6" ,"Luminal H-S"= "#F0BDED" , "p16_cycling"="#EBD16A" , "Isg15+ GCreP_L_7412"= "#7BA674",  "Hist1h2ap+ T_1"="#A1B3E6" , "Emp1+ T_1"="#5783BD" , "Mgp+ T_1"= "#3B58B8" , "Apod+ T_1"= "#1F29AD")
s1
umap_custom <- as.data.frame(s1[["umap"]]@cell.embeddings)
metada_cells_col <- new_col[match(s1$subtype,names(new_col))]
draw <- sample(1:dim(umap_custom)[1])
p <- ggplot(umap_custom[draw,], aes(x =UMAP_1, y = UMAP_2 ))+ geom_point(size = 3, shape = 21,fill = metada_cells_col[draw],alpha=1) + theme_classic() + NoLegend() + NoAxes()
p
colourpicker:::colourPickerAddin()
colourpicker:::colourPickerAddin()
new_col=c("LP"= "#F27ECB",  "Avd"="#DB87E6" ,"Luminal H-S"= "#F0BDED" , "p16_cycling"="#B0F2B6" , "Isg15+ GCreP_L_7412"= "#C5DEEB",  "Hist1h2ap+ T_1"="#A1B3E6" , "Emp1+ T_1"="#5783BD" , "Mgp+ T_1"= "#3B58B8" , "Apod+ T_1"= "#1F29AD")
umap_custom <- as.data.frame(s1[["umap"]]@cell.embeddings)
metada_cells_col <- new_col[match(s1$subtype,names(new_col))]
draw <- sample(1:dim(umap_custom)[1])
p <- ggplot(umap_custom[draw,], aes(x =UMAP_1, y = UMAP_2 ))+ geom_point(size = 3, shape = 21,fill = metada_cells_col[draw],alpha=1) + theme_classic() + NoLegend() + NoAxes()
q <- ggplot(umap_custom[draw,], aes(x =UMAP_1, y = UMAP_2 ))+ geom_point(size = 3, shape = 21,fill = metada_cells_col[draw],alpha=1) + theme_classic() + NoLegend() + NoAxes()
q
col
col=qs::qread("C:/Users/Melissa S/Desktop/Epith_Cols_Subtype.qs")
col
new_col=c("LP"= "#F27ECB",  "Avd"="#DB87E6" ,"Luminal H-S"= "#F0BDED" , "p16_cycling"="#ACEB0E" , "Isg15+ GCreP_L_7412"= "#B0F2B6",  "Hist1h2ap+ T_1"="#A1B3E6" , "Emp1+ T_1"="#5783BD" , "Mgp+ T_1"= "#3B58B8" , "Apod+ T_1"= "#1F29AD")
umap_custom <- as.data.frame(s1[["umap"]]@cell.embeddings)
metada_cells_col <- new_col[match(s1$subtype,names(new_col))]
draw <- sample(1:dim(umap_custom)[1])
q <- ggplot(umap_custom[draw,], aes(x =UMAP_1, y = UMAP_2 ))+ geom_point(size = 3, shape = 21,fill = metada_cells_col[draw],alpha=1) + theme_classic() + NoLegend() + NoAxes()
q
colourpicker:::colourPickerAddin()
new_col=c("LP"= "#F27ECB",  "Avd"="#DB87E6" ,"Luminal H-S"= "#F0BDED" , "p16_cycling"="#AAF54F" , "Isg15+ GCreP_L_7412"= "#A2CBCF",  "Hist1h2ap+ T_1"="#A1B3E6" , "Emp1+ T_1"="#5783BD" , "Mgp+ T_1"= "#3B58B8" , "Apod+ T_1"= "#1F29AD")
umap_custom <- as.data.frame(s1[["umap"]]@cell.embeddings)
metada_cells_col <- new_col[match(s1$subtype,names(new_col))]
draw <- sample(1:dim(umap_custom)[1])
q <- ggplot(umap_custom[draw,], aes(x =UMAP_1, y = UMAP_2 ))+ geom_point(size = 3, shape = 21,fill = metada_cells_col[draw],alpha=1) + theme_classic() + NoLegend() + NoAxes()
q
q
DimPlot(epith, group.by = "sub.cluster")
DimPlot(epith, group.by = "sub.cluster", label = T)
knitr::opts_chunk$set(echo = TRUE)
inputDir="C:/Users/Melissa S/Desktop/PROJECTS/Brca1_Tumorigenesis/REVIEW/input/mouse/invivo"
outputDir= "C:/Users/Melissa S/Desktop/PROJECTS/Brca1_Tumorigenesis/REVIEW/output/mouse/invivo"
##
RDatadir <- file.path(outputDir,"RData") ; if(!file.exists(RDatadir)){dir.create(RDatadir)}
QCdir <- file.path(outputDir, "QC") ; if(!file.exists(QCdir)){dir.create(QCdir)}
annotDir= file.path(outputDir, "Annotation") ; if(!file.exists(annotDir)){dir.create(annotDir)}
cnvDir= file.path(outputDir, "CNV") ; if(!file.exists(cnvDir)){dir.create(cnvDir)}
#cellchatDir= file.path(outputDir, "CellChat") ; if(!file.exists(cellchatDir)){dir.create(cellchatDir)}
figDir= file.path(outputDir, "Figures") ; if(!file.exists(figDir)){dir.create(figDir)}
library(ggExtra)
library(cowplot)
library(ggplot2)
library(Seurat)
gtheme= theme (axis.text.x = element_text(size=12, face="bold", colour = "black", angle = 0, hjust = 0.5),axis.text.y = element_text(size=12, face="bold", colour = "black"),legend.text = element_text(face = "bold", size = 12),text=element_text(size=14, face="bold", colour = "black"))
###
themplot=theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),axis.ticks.x=element_blank())
'%!in%' <- function(x,y)!('%in%'(x,y))
knitr::opts_chunk$set(echo = TRUE)
inputDir="C:/Users/Melissa S/Desktop/PROJECTS/Brca1_Tumorigenesis/REVIEW/input/mouse/invivo"
outputDir= "C:/Users/Melissa S/Desktop/PROJECTS/Brca1_Tumorigenesis/REVIEW/output/mouse/invivo"
##
RDatadir <- file.path(outputDir,"RData") ; if(!file.exists(RDatadir)){dir.create(RDatadir)}
QCdir <- file.path(outputDir, "QC") ; if(!file.exists(QCdir)){dir.create(QCdir)}
annotDir= file.path(outputDir, "Annotation") ; if(!file.exists(annotDir)){dir.create(annotDir)}
cnvDir= file.path(outputDir, "CNV") ; if(!file.exists(cnvDir)){dir.create(cnvDir)}
#cellchatDir= file.path(outputDir, "CellChat") ; if(!file.exists(cellchatDir)){dir.create(cellchatDir)}
figDir= file.path(outputDir, "Figures") ; if(!file.exists(figDir)){dir.create(figDir)}
library(ggExtra)
library(cowplot)
library(ggplot2)
library(Seurat)
gtheme= theme (axis.text.x = element_text(size=12, face="bold", colour = "black", angle = 0, hjust = 0.5),axis.text.y = element_text(size=12, face="bold", colour = "black"),legend.text = element_text(face = "bold", size = 12),text=element_text(size=14, face="bold", colour = "black"))
###
themplot=theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),axis.ticks.x=element_blank())
'%!in%' <- function(x,y)!('%in%'(x,y))
epith=qs::qread(file.path(RDatadir,"Epithelial_Only_KeepF_NoCreN_SubtypeAnnotated.qs"))
gc()
ccp16 <- qs::qread(paste0(cnvDir,"/CC_pretumoral_Cnv.qs")) #removed p16 from tumor cells
kp= ccp16[[4]]$consensusClass
pc <- as.data.frame(kp)
pc$cell=rownames(pc)
p16= obs[,which(colnames(obs) %in% rownames(epith@meta.data)[which(epith$subtype=="p16_cycling")]  )]
knitr::opts_chunk$set(echo = TRUE)
epith=qs::qread(file.path(RDatadir,"Epithelial_Only_KeepF_NoCreN_SubtypeAnnotated.qs"))
DimPlot(epith)
Idents(epith)="subtype"
unique(epith$subtype)
library(tidyverse)
p16= FindMarkers(seu, ident.1 = "p16_cycling", ident.2 = c("LP", "Avd"), only.pos = TRUE, logfc.threshold = 0.8, min.diff.pct = 0.2) %>% dplyr::filter(p_val_adj<0.05 )  %>% tibble::rownames_to_column("gene")
p16= FindMarkers(epith, ident.1 = "p16_cycling", ident.2 = c("LP", "Avd"), only.pos = TRUE, logfc.threshold = 0.8, min.diff.pct = 0.2) %>% dplyr::filter(p_val_adj<0.05 )  %>% tibble::rownames_to_column("gene")
View(p16)
p16= FindMarkers(epith, ident.1 = "p16_cycling", ident.2 = c("LP", "Avd"), only.pos = TRUE, logfc.threshold = 0.75, min.diff.pct = 0.2) %>% dplyr::filter(p_val_adj<0.05 )  %>% tibble::rownames_to_column("gene")
p16= p16 %>% dplyr::filter(!gene %in% grep("$Rik", p16$gene, value = T))
p16= p16 %>% dplyr::filter(!gene %in% grep("$Rik", gene, value = T))
p16= p16 %>% dplyr::filter(!gene %in% grep("Rik$", gene, value = T))
View(p16)
p16= FindMarkers(epith, ident.1 = "p16_cycling", ident.2 = c("LP", "Avd"), only.pos = TRUE, logfc.threshold = 0.8, min.diff.pct = 0.2) %>% dplyr::filter(p_val_adj<0.05 )  %>% tibble::rownames_to_column("gene")
p16= p16 %>% dplyr::filter(!gene %in% grep("Rik$", gene, value = T))
View(p16)
genes = p16$gene
url = "https://maayanlab.cloud/chea3/api/enrich/"
encode = "json"
payload = list(query_name = "myQuery", gene_set = genes)
#POST to ChEA3 server
response = POST(url = url, body = payload, encode = encode)
library(httr)
response = POST(url = url, body = payload, encode = encode)
json = httr::content(response, as="text")
results = fromJSON(json)
library(RJSONIO)
#results as list of R dataframes
results = fromJSON(json)
dt= results[["Integrated--meanRank"]]
dt$Score=as.numeric(as.character(dt$Score))
dt$Rank=as.numeric(as.character(dt$Rank))
View(dt)
writexl::write_xlsx(dt, paste0(RDatadir, "/Chea3_OverexpressedGenes_P16cyclingPop.xlsx"))
qs::qsave(dt, paste0(RDatadir, "/Chea3_OverexpressedGenes_P16cyclingPop.qs"))
View(dt)
dt=as.data.frame(dt)
dt= results[["Integrated--meanRank"]] %>% as.data.frame()
View(dt)
dt= results[["Integrated--meanRank"]] %>% t() %>% as.data.frame()
dt= results[["Integrated--meanRank"]]
dt <- as.data.frame(do.call(rbind, dt))
View(dt)
dt$Score=as.numeric(as.character(dt$Score))
dt$Rank=as.numeric(as.character(dt$Rank))
writexl::write_xlsx(dt, paste0(RDatadir, "/Chea3_OverexpressedGenes_P16cyclingPop.xlsx"))
dt$Top=ifelse(dt$Score <= 74, "Top", "No")
p <- dt %>% ggplot(aes(y= log(Score), x=Rank)) + geom_point() + theme_bw() + geom_hline(yintercept = 4, color= "red")
p
geom_point() + theme_bw() + geom_hline(yintercept = 4, color= "red")
p <- dt %>% ggplot(aes(x= log(Score))) + geom_density() + theme_bw()
p
p <- dt %>% ggplot(aes(y= log(Score), x=Rank)) + theme_bw() + geom_hline(yintercept = 4.2, color= "red")+
geom_text_repel(
data = subset(dt, Score <= 74),
aes(label = TF),
size = 3,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines")) + geom_point(aes(color = Top)) +
scale_color_manual(values = c( "grey","red"))
library(ggrepel)
p <- dt %>% ggplot(aes(y= log(Score), x=Rank)) + theme_bw() + geom_hline(yintercept = 4.2, color= "red")+
geom_text_repel(
data = subset(dt, Score <= 74),
aes(label = TF),
size = 3,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines")) + geom_point(aes(color = Top)) +
scale_color_manual(values = c( "grey","red"))
p
p <- dt %>% ggplot(aes(y= log(Score), x=Rank)) + theme_bw() + geom_hline(yintercept = 4.2, color= "red")+
geom_text_repel(
data = subset(dt, Score <= 74),
aes(label = TF),
size = 2,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines")) + geom_point(aes(color = Top)) +
scale_color_manual(values = c( "grey","red"))
p
options(ggrepel.max.overlaps = Inf)
p <- dt %>% ggplot(aes(y= log(Score), x=Rank)) + theme_bw() + geom_hline(yintercept = 4.2, color= "red")+
geom_text_repel(
data = subset(dt, Score <= 74),
aes(label = TF),
size = 2,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines")) + geom_point(aes(color = Top)) +
scale_color_manual(values = c( "grey","red"))
p
pdf(paste0(figDir, "/Fig4_Plot_Rank_logScore.pdf"))
p <- dt %>% ggplot(aes(y= log(Score), x=Rank)) + geom_point() + theme_bw() + geom_hline(yintercept = 4, color= "red")
print(p)
p <- dt %>% ggplot(aes(x= log(Score))) + geom_density() + theme_bw()
print(p)
options(ggrepel.max.overlaps = Inf)
p <- dt %>% ggplot(aes(y= log(Score), x=Rank)) + theme_bw() + geom_hline(yintercept = 4.2, color= "red")+
geom_text_repel(
data = subset(dt, Score <= 74),
aes(label = TF),
size = 2,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines")) + geom_point(aes(color = Top)) +
scale_color_manual(values = c( "grey","red"))
print(p)
dev.off()
dev.off()
knitr::opts_chunk$set(echo = TRUE)
PrctCellExpringGene <- function(object, genes, group.by = "all"){
if(group.by == "all"){
prct = unlist(lapply(genes,calc_helper, object=object))
result = data.frame(Markers = genes, Cell_proportion = prct)
return(result)
}
else{
list = SplitObject(object, group.by)
factors = names(list)
results = lapply(list, PrctCellExpringGene, genes=genes)
for(i in 1:length(factors)){
results[[i]]$Feature = factors[i]
}
combined = do.call("rbind", results)
return(combined)
}
}
calc_helper <- function(object,genes){
counts = object[['RNA']]@data
ncells = ncol(counts)
if(genes %in% row.names(counts)){
sum(counts[genes,]>0)/ncells
}else{return(NA)}
}
top_tf=dt$TF[1:31] %>% tolower() %>% Hmisc::capitalize()
top_TF=dt[1:31,]
#####
tf.expression= PrctCellExpringGene(seu, genes= top_tf, group.by = "subtype" )
tf.expression= PrctCellExpringGene(epith, genes= top_tf, group.by = "subtype" )
tf.expressiona= PrctCellExpringGene(epith, genes= top_tf, group.by = "all" )
tf.expressiona$rank= seq(1, nrow(tf.expressiona))
df= tf.expression %>% filter(Feature== "p16_cycling")
tf.expressiona$isexpP16= ifelse(df$Cell_proportion > 0.2, "High_pct_Expression", "Low_pct_Expression")
l=list("Percentage_Exp_Subtype"=tf.expression , "Percentage_Exp_All"=tf.expressiona, "OnlyPretumoralCells"= dt)
writexl::write_xlsx(l,paste0(RDatadir, "/Chea3_TopTF_P16Cycling.xlsx"))
df= tf.expression %>% filter(Feature== "p16_cycling")
df$TF= toupper(df$Markers)
top_TF= merge(top_TF, df, by="TF")
top_TF$Cell_proportion= ifelse(is.na(top_TF$Cell_proportion)==TRUE, 0, top_TF$Cell_proportion)
###
top_TF$isexpP16= ifelse(top_TF$Cell_proportion >= 0.1, "Expressed", "NotExpressed")
top_TF$isexpP16= ifelse(is.na(top_TF$isexpP16)==TRUE, "NotExpressed", top_TF$isexpP16)
View(top_TF)
g <- top_TF %>% ggplot(aes(x= reorder(TF, Rank), y= Score, fill= isexpP16)) + geom_bar(stat="identity") + theme_bw() + scale_fill_manual(values= c("Expressed"="#4F568C", "NotExpressed"="#CDDBDE")) + coord_flip()
g
pdf(paste0(figDir, "/Barplot_Top30TF_P16cluster.pdf"))
g <- top_TF %>% ggplot(aes(x= reorder(TF, Rank), y= Score, fill= isexpP16)) + geom_bar(stat="identity") + theme_bw() + scale_fill_manual(values= c("Expressed"="#4F568C", "NotExpressed"="#CDDBDE")) + coord_flip()
print(g)
dev.off()
writexl::write_xlsx(top_TF, paste0(RDatadir, "/Top_TF_PretumoralCells_ExpressionPct.xlsx"))
dev.off()
g
p <- top_TF %>% ggplot(aes(y= log(Score), x=Rank, size= Cell_proportion, color= Cell_proportion)) + theme_bw() + geom_hline(yintercept = 4.2, color= "red")+
geom_text_repel(
data = subset(top_TF, Score <= 74),
aes(label = TF),
size = 3,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines")) + geom_point() +
scale_color_viridis(option="B")
library(viridis)
p <- top_TF %>% ggplot(aes(y= log(Score), x=Rank, size= Cell_proportion, color= Cell_proportion)) + theme_bw() + geom_hline(yintercept = 4.2, color= "red")+
geom_text_repel(
data = subset(top_TF, Score <= 74),
aes(label = TF),
size = 3,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines")) + geom_point() +
scale_color_viridis(option="B")
p
pdf(paste0(figDir, "/DotPlot_Top30Genes_CellProp_Rank_Score.pdf"))
p <- top_TF %>% ggplot(aes(y= log(Score), x=Rank, size= Cell_proportion, color= Cell_proportion)) + theme_bw() + geom_hline(yintercept = 4.2, color= "red")+
geom_text_repel(
data = subset(top_TF, Score <= 74),
aes(label = TF),
size = 3,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines")) + geom_point() +
scale_color_viridis(option="B")
print(p)
dev.off()
dev.off()
pdf(paste0(figDir, "/Fig2_DotPlot_Top30Genes_CellProp_FC_Rank_Score.pdf"))
p <- top_TF %>% ggplot(aes(y= log(Score), x=Rank, size= Cell_proportion, color= Cell_proportion)) + theme_bw() + geom_hline(yintercept = 4.2, color= "red")+
geom_text_repel(
data = subset(top_TF, Score <= 74),
aes(label = TF),
size = 3,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines")) + geom_point() +
scale_color_viridis(option="B")
print(p)
p <- top_TF %>% ggplot(aes(y= log(Score), x=Rank, size= avg_log2FC, color= avg_log2FC)) + theme_bw() + geom_hline(yintercept = 4.2, color= "red")+
geom_text_repel(
data = subset(top_TF, Score <= 74),
aes(label = TF),
size = 3,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines")) + geom_point() +
scale_color_viridis(option="B")
print(p)
p <- top_TF %>% ggplot(aes(y= log(Score), x=Rank, size= Cell_proportion, color= avg_log2FC)) + theme_bw() + geom_hline(yintercept = 4.2, color= "red")+
geom_text_repel(
data = subset(top_TF, Score <= 74),
aes(label = TF),
size = 3,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines")) + geom_point() +
scale_color_viridis(option="B")
p
knitr::opts_chunk$set(echo = TRUE)
seu=epith
setwd(figDir)
dir.create(paste0(figDir,"/cisTarget_databases"))
dbFiles <- c("https://resources.aertslab.org/cistarget/databases/homo_sapiens/hg19/refseq_r45/mc9nr/gene_based/hg19-500bp-upstream-7species.mc9nr.feather",
"https://resources.aertslab.org/cistarget/databases/homo_sapiens/hg19/refseq_r45/mc9nr/gene_based/hg19-tss-centered-10kb-7species.mc9nr.feather")
library(SCENIC)
setwd(paste0(figDir,"/cisTarget_databases"))
for(featherURL in dbFiles)
{
download.file(featherURL, destfile=basename(featherURL)) # saved in current dir
}
setwd(paste0(figDir,"/cisTarget_databases"))
library(SCENIC)
org <- "mgi"
dbDir <- paste0(figDir,"/cisTarget_databases")
dbs <- defaultDbNames[[org]]
scenicOptions <- initializeScenic(org=org, dbDir=dbDir, dbs=dbs, datasetTitle=myDatasetTitle, nCores=7)
myDatasetTitle <- "SCENIC test" # choose a name for your analysis
scenicOptions <- initializeScenic(org=org, dbDir=dbDir, dbs=dbs, datasetTitle=myDatasetTitle, nCores=7)
setwd(scenicDir)
############################################################################
scenicDir=figDir
setwd(scenicDir)
cellInfo <- data.frame(seu@meta.data)
colnames(cellInfo)[which(colnames(cellInfo)=="orig.ident")] <- "sample"
colnames(cellInfo)[which(colnames(cellInfo)=="nFeature_RNA")] <- "nGene"
colnames(cellInfo)[which(colnames(cellInfo)=="nCount_RNA")] <- "nUMI"
colnames(cellInfo)[which(colnames(cellInfo)=="seurat_clusters")] <- "cluster"
colnames(cellInfo)[which(colnames(cellInfo)=="subtype")] <- "celltype"
cellInfo <- cellInfo[,c("sample","nGene","nUMI","cluster","celltype")]
#----------------------------------###
scenicOptions@inputDatasetInfo$cellInfo <- cellInfo
saveRDS(scenicOptions, file=paste0(scenicDir, "/int/scenicOptions.Rds"))
saveRDS(scenicOptions, file=paste0(scenicDir, "/int/scenicOptions.Rds"))
##############################################################
setwd(scenicDir)
scenicOptions@settings$modules$weightThreshold= 0.05
sseu= subset(seu,idents= c("LP" ,"Hist1h2ap+ T_1","Avd","p16_cycling","Emp1+ T_1", "Apod+ T_1",  "Mgp+ T_1","Isg15+ GCreP_L_7412","Luminal H-S"))
gc()
exprMat <- as.matrix(sseu@assays$RNA@counts) #Prepare the expression matrix. In order to save computing resources, only some cells are randomly selected to calculate the co-expression network
genesKept <- geneFiltering(exprMat,
scenicOptions=scenicOptions,minCountsPerGene=5*.01*ncol(exprMat),minSamples=ncol(exprMat)*.05) #Gene filtering/selection, remove genes that are most likely to be noise
exprMat_filtered <- exprMat[genesKept, ]
dim(exprMat_filtered)
##############################################################
setwd(scenicDir)
runCorrelation(exprMat_filtered, scenicOptions) ##Calculate the correlation matrix, 1.2_corrMat.Rds: the correlation matrix between genes
exprMat_filtered <- log2(exprMat_filtered+1) #complete matrix
runGenie3(exprMat_filtered, scenicOptions, nParts = 5) #nParts parameter, is to divide the expression matrix into n parts and calculate separately
